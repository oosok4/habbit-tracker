{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navBar.jsx","app.jsx","components/simpleHabit.jsx","index.js"],"names":["Habit","handleIncrement","habit","props","onIncrement","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","handleHabitAdd","handleAdd","habits","map","id","onReset","Component","NavBar","totalCount","SimpleHabit","useState","setCount","spanRef","useRef","useCallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA2CeA,E,4MAvCXC,gBAAkB,SAACC,GACf,EAAKC,MAAMC,YAAY,EAAKD,MAAMD,Q,EAEtCG,gBAAkB,SAACH,GACf,EAAKC,MAAMG,YAAY,EAAKH,MAAMD,Q,EAEtCK,aAAe,SAACL,GACZ,EAAKC,MAAMK,SAAS,EAAKL,MAAMD,Q,4CAGnC,WAEoBO,KAAKN,MAAMD,MAAMQ,KAAjC,IAFK,EAKgBD,KAAKN,MAAMD,MAA3BQ,EALA,EAKAA,KAAOC,EALP,EAKOA,MAIZ,OACA,qBAAIC,UAAU,QAAd,UACI,uBAAOA,UAAY,aAAnB,cAAmCF,KACnC,uBAAOE,UAAY,cAAnB,cAAoCD,KACpC,wBAAUC,UAAU,+BAA+BC,QAASJ,KAAKR,gBAAjE,SACI,mBAAGW,UAAU,yBAGjB,wBAAQA,UAAU,8BAA8BC,QAASJ,KAAKJ,gBAA9D,SACI,mBAAGO,UAAU,0BAGjB,wBAAQA,UAAU,4BAA4BC,QAASJ,KAAKF,aAA5D,SACI,mBAAGK,UAAU,0B,GAlCTE,iBCoBLC,EAnBMC,gBAAK,SAACb,GACvB,IAAMc,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAQvB,OACI,uBAAME,IAAKJ,EAASL,UAAU,WAAWU,SAP5B,SAAAC,GACbA,EAAMC,iBACN,IAAMd,EAAOU,EAASK,QAAQC,MAC9BhB,GAAQP,EAAMwB,MAAMjB,GACpBO,EAAQQ,QAAQG,SAGhB,UACI,uBAAOP,IAAKD,EAAUS,KAAK,OAAOjB,UAAU,YAAYkB,YAAY,4BACpE,wBAAQlB,UAAU,aAAlB,uBC+BGmB,E,4MAzCX9B,gBAAkB,SAAAC,GACd,EAAKC,MAAMC,YAAYF,I,EAE3BG,gBAAkB,SAAAH,GACd,EAAKC,MAAMG,YAAYJ,I,EAE3BK,aAAe,SAAAL,GACX,EAAKC,MAAMK,SAASN,I,EAGxB8B,eAAiB,SAAA9B,GACb,EAAKC,MAAMK,SAASN,I,EAGxB+B,UAAY,SAAAvB,GACR,EAAKP,MAAMwB,MAAMjB,I,4CAGrB,WAAU,IAAD,OACL,OACI,qCACI,cAAC,EAAD,CAAciB,MAAOlB,KAAKwB,YAC1B,6BACKxB,KAAKN,MAAM+B,OAAOC,KAAI,SAAAjC,GAAK,OACxB,cAAC,EAAD,CAEIA,MAAOA,EACPE,YAAa,EAAKH,gBAClBK,YAAa,EAAKD,gBAClBG,SAAU,EAAKD,cAJTL,EAAMkC,SAQxB,wBAAQP,KAAK,SAAUjB,UAAW,YAAYC,QAASJ,KAAKN,MAAMkC,QAAlE,8B,GAlCKC,aCUNC,E,4JAXX,WACI,OACI,sBAAK3B,UAAU,eAAf,UACI,oEACA,sBAAMA,UAAW,eAAjB,SAAiCH,KAAKN,MAAMqC,oB,GANvC1B,iB,GCIHwB,Y,aC8BHG,EAhCK,SAACtC,GAAW,IAAD,EACDuC,mBAAS,GADR,mBACpB/B,EADoB,KACbgC,EADa,KAKrBC,EAAUC,mBAWV5C,EAAkB6C,uBAAY,WAChCH,EAAShC,EAAQ,MAGrB,OACI,qBAAIC,UAAU,QAAd,UACI,sBAAOS,IAAKuB,EAAShC,UAAY,aAAjC,sBACA,uBAAOA,UAAY,cAAnB,cAAoCD,KACpC,wBAAUC,UAAU,+BAA+BC,QAASZ,EAA5D,SACI,mBAAGW,UAAU,6BCrB7BmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.02c770aa.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n    \n    handleIncrement = (habit) => {\n        this.props.onIncrement(this.props.habit);\n    };\n    handleDecrement = (habit) => {\n        this.props.onDecrement(this.props.habit);\n    };\n    handleDelete = (habit) => {\n        this.props.onDelete(this.props.habit);\n    };\n\n    render() {\n        // 기존에 내가 하던방법 : \n        var habitName = this.props.habit.name;\n\n        //엘리가 알려준 방법\n        var {name , count} = this.props.habit;\n        //이렇게하면 전달받은 프로포티스값이 각 이름으로 입렫된다.\n        // 하지만 이 경우, 같은 변수명으로 입력해주어야 한다.\n\n        return (\n        <li className='habit'> \n            < span className = \"habit-name\" > {name}</span> \n            < span className = \"habit-count\" > {count}</span> \n            < button  className='habit-button  habit-increase' onClick={this.handleIncrement}> \n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            \n            <button className='habit-button habit-decrease' onClick={this.handleDecrement}>\n                <i className=\"fas fa-minus-square\"></i>\n            </button>\n        \n            <button className='habit-button habit-delete' onClick={this.handleDelete}>\n                <i className=\"fas fa-trash\"></i>\n            </button>\n        </li>\n        );\n    }\n}\n\nexport default Habit;","import React, { memo } from 'react';\n\n//이게 fuction으로 만들었을때 , rsi로 만들경우\nconst HabitAddForm = memo((props) => {\n    const formRef = React.createRef();\n    const inputRef = React.createRef();\n    \n    const onSubmit = event =>{\n        event.preventDefault();\n        const name = inputRef.current.value;\n        name && props.onAdd(name);\n        formRef.current.reset();\n    };\n    return (\n        <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\n            <input ref={inputRef} type=\"text\" className='add-input' placeholder='pleas enter yout Habit!'/>\n            <button className=\"add-button\" >Add</button> \n        </form>\n    );\n\n});\n\nexport default HabitAddForm;\n\n\n// rcc 해빗애드폼 클래스로 만들기\n// class HabitAddForm extends Component {\n//     inputRef = React.createRef();\n    \n//     onSubmit = event =>{\n//         event.preventDefault();\n//         const name = this.inputRef.current.value;\n//         name && this.props.onAdd(name);\n//         this.inputRef.current.value = '';\n//     };\n\n//     render() {\n        \n//     }\n// }\n\n// export default HabitAddForm;","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\n\nclass Habits extends Component {\n    handleIncrement = habit => {\n        this.props.onIncrement(habit);\n    };\n    handleDecrement = habit => {\n        this.props.onDecrement(habit);\n    };\n    handleDelete = habit => {\n        this.props.onDelete(habit);\n    };\n\n    handleHabitAdd = habit => {\n        this.props.onDelete(habit);\n    };\n\n    handleAdd = name =>{\n        this.props.onAdd(name);\n    }\n\n    render() {\n        return (\n            <>\n                <HabitAddForm onAdd={this.handleAdd}/>\n                <ul>\n                    {this.props.habits.map(habit => (\n                        <Habit \n                            key ={habit.id} \n                            habit={habit}\n                            onIncrement={this.handleIncrement}\n                            onDecrement={this.handleDecrement}\n                            onDelete={this.handleDelete}\n                        />\n                    ))}\n                </ul>\n                <button type=\"button\"  className ='btn-reset' onClick={this.props.onReset} >Reset All</button>\n            </>\n            \n        );\n            \n    }\n}\n\nexport default Habits;","import React, { PureComponent } from 'react';\n\nclass NavBar extends PureComponent {\n    \n    render() {\n        return (\n            <div className='habit-navbar'>\n                <span>🌱&nbsp;&nbsp;Habit Traker</span>\n                <span className ='navbar-count'>{this.props.totalCount}</span>\n            \n            </div>\n        );\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport NavBar from './components/navBar';\n\n\nclass App extends Component {\n  state = {\n    habits : [\n        { id : 1, name : 'Reading',count : 0},\n        { id : 2, name : 'Running',count : 0},\n        { id : 3, name : 'Coding',count : 0},\n    ] \n  };\n\n  handleIncrement = habit => {\n    const habits = this.state.habits.map(item =>{\n      if(item.id === habit.id){\n        return {...habit,count : habit.count +1};\n      }else{\n        return item;\n      }\n    });\n    this.setState({habits});\n\n\n      //  console.log(`handleIncrement ${habit}`);\n      //  const habits = [...this.state.habits];\n      //  위에서 쓰인 ... 연산자는 배열에서 내용물을 복사해서 가져와서\n      //  새로운 배열 껍대기를 만들 때 사용한다.\n      //  위와같이 단순하게 덧셈뺄샘의 경우 위에서 가져온 인자를 ++ 한다음\n      //  setState를 해도 될것 같지만 그렇게하는게 안좋다고 한다\n      //  const index = habits.indexOf(habit);\n      //  habits[index].count++;\n      //  this.setState({habits});\n      //  원래의 경우엔 this.setState({habits :habits });가 맞다 \n      //  this.setState({key : value})\n      //  멤버 state안에 있는 habits를 새로 복사한 habits로 setState하는건데\n      //  위와같은경우 새로만든 배열과 기존의 있던 배열이 이름이 같으므로 위와같이 사용한다.\n  };\n  handleDecrement = habit => {\n\n    //pure 컴포넌트일때 사용방법\n    const habits = this.state.habits.map(item =>{\n      if(item.id === habit.id){\n        const count = habit.count - 1;\n        return {...habit,count : count < 0 ? 0 :count };\n      }else{\n        return item;\n      }\n    });\n    this.setState({habits});\n    /*\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    const count = habits[index].count - 1;\n    habits[index].count = count < 0 ? 0 : count;\n    this.setState({habits});\n    */\n  };\n  handleDelete = habit => {    \n      // const habits = [...this.state.habits];\n      // const index = habits.indexOf(habit);\n      // habits.splice(index, 1);\n      // this.setState({habits});\n      \n      // 어떤 특정한 것을 제외하고 또는 포함해서 만들수있는 배열의 유용한 api인 \n      // filter를 이용하자.\n      const habits = this.state.habits.filter(item => item.id !== habit.id);\n      this.setState({habits});\n\n\n  };\n\n  handleAdd = name => {\n    // 내가 짠 코드 //\n    // const habits = [...this.state.habits];\n    // const count = 0;\n    // const habit = {name , count} ;\n    // const new_habits2 = habits.concat(habit);    \n    // this.setState({habits : new_habits2});\n\n    // 엘리가 짠 코드\n    const habits = [...this.state.habits,{id : Date.now(),name,count : 0}];\n    this.setState({habits});\n  };\n\n  handleReset = () => {\n    // 퓨어컴포넌트일때\n    const habits = this.state.habits.map(habit =>{\n      if(habit.count !== 0){\n        return {...habit,count : 0};\n      }\n      return habit;\n    });\n    this.setState({habits});\n\n    //일반 컴포넌트일때\n    // const habits = this.state.habits.map(habit =>{\n    //   habit.count = 0;\n    //   return habit;\n    // });\n    // this.setState({habits});\n    \n  };\n  \n  render() {\n    return (\n      <>\n        <NavBar totalCount ={this.state.habits.filter(item => item.count > 0).length} />\n        <Habits \n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n        \n      </>\n    );\n    \n  }\n}\n\nexport default App;\n","import React, { useCallback, useRef, useState } from 'react';\n\n// class에서 사용되는 createRef는 함수에서는 반복적으로 생성되어진다.\n// 그래서 이런것들을 방지하고자 react에서 함수를 사용할 때는 useRef()라는 것을 이용하라고 만들어주었다.\nconst SimpleHabit = (props) => {\n    const [count, setCount] = useState(0); //0은 초기값\n    //class에서 사용되는 createRef() 함수\n    //const spanRef = React.createRef();\n    \n    const spanRef = useRef();\n    //한번 만들어놓으면 메모리에 자동으로 저장된다.\n\n\n    //  이런 메소드 또한 함수에서는 반복적으로 저장되어지기 때문에 \n    //  만약 메소드가 자식컴포넌트에서 불러온거라면 반복적으로 새로운 함수가\n    //  호출되는것이다. 이런 반복적인 호출을 막고자\n    //  useCallback이란 함수를 사용한다.\n    // const handleIncrement = () => {\n    //     setCount(count + 1);\n    // };\n    const handleIncrement = useCallback(() => {\n        setCount(count + 1);\n    }); \n\n    return (\n        <li className='habit'> \n            < span ref={spanRef} className = \"habit-name\" > Reading</span> \n            < span className = \"habit-count\" > {count}</span> \n            < button  className='habit-button  habit-increase' onClick={handleIncrement}> \n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n        \n        </li>\n        );\n};\n\nexport default SimpleHabit;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleHabit />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}